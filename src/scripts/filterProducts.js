const fs = require("fs");
const csv = require("csv-parser");
const fastCsv = require("fast-csv");
const path = require("path");

// Ensure paths work on Windows
const inputFile = path.join(__dirname, "csvFiles", "products.csv");
const outputFile = path.join(__dirname, "filtered_products.csv");

// Input CSV file
 
let uniqueProducts =[]

// SKUs to filter (ensure they are all strings)
const mySKUs =new Set([
1140637485,1140634588,1140634589,1140634590,1140637486,1140634582,1140634583,1140634584,1140634585,1140634586,1140634587,1140637487,1140634574,1140634575,1140634576,1140634577,1140634578,1140634579,1140634580,1140634581,1140637504,1140633291,1140633292,1140633293,1140637505,1140633285,1140633286,1140633287,1140633288,1140633289,1140633290,1140637506,1140633277,1140633278,1140633279,1140633280,1140633281,1140633282,1140633283,1140633284,1576504,1140626501,1140626502,1140626503,1140626504,1140626505,1140594708,914,915,916,917,1140599214,910,911,912,913,1140612351,1517,1518,1519,1520,1521,1140621376,1581,1582,1583,1584,1585,1586,1105,1946503,111823842,2029609,108983801,1140594709,1140626490,1140626491,1140626492,1140626493,1140612402,1549,1550,1551,1552,1140612403,1569,1570,1571,1572,1573,1574,1140612404,1575,1576,1577,1578,1579,1580,1140621381,1638,1639,1640,1641,1642,1643,1644,1645,1646,1710,1711,1712,1713,1140621383,1512,1513,1514,1515,1516,1890,1140619022,1140619023,1140619024,1140619025,1140619026,1140619027,111822638,1560,1561,1562,1140612355,1525,1526,1527,1528,1529,1140612409,1602,1603,1604,1605,1606,1607,1140621384,1608,1609,1610,1611,1612,1613,1140621386,1656,1657,1658,1659,1660,1661,1662,1663,1664,1140621387,1140632206,1140632207,1140632208,1140632209,1140621389,1665,1666,1667,1668,1669,1670,1671,1672,1673,1140633190,111822800,111822802,111822803,111822804,111822805,111822806,111822807,1140625916,1140642162,1140642163,1140642164,1140642165,1140625917,1140625919,1140625923,1140642135,1140625924,1140642136,1140625909,1140625912,1140625913,1140625920,1140625918,1140637502,1140633797,1140633798,1140640274,1140640275,1140642106,1140640271,1140640272,1140640273,107484301,1140624815,1140633371,1140633372,1140633373,1140633374,1140642101,1140624086,1140624087,1140624088,1140624089,1038,1140621465,1140621468,1140621470,1039,1140621449,1140621453,1140621457,1140621461,1045,1140610483,1140610484,1140610486,1140610487,1140610661,1135,1140621451,1140621455,1140621459,1140621463,1140642102,1140622988,1140622989,1140622990,1140622991,1140610639,111822808,1090,1091,1092,1093,1094,111822811,1100,1101,1102,1103,1104,1140611621,1080,1081,1082,1083,1084,1140611625,1075,1076,1077,1078,1079,1140611626,1070,1071,1072,1073,1074,1140611627,1065,1066,1067,1068,1069,1140629445,1140629701,1140642133,1140629441,1140629442,1140629443,1140629444,1140615067,1140616065,1891,1140619218,1140619219,1140619220,1140619221,1140619222,1140619223,1140619224,1140619225,1140619226,1140619228,1140619229,1140619230,1140619231,1140619232,1140619233,1140619234,1140619235,1140631707,1140642132,1140631463,1140631464,1140642098,1140639635,1140639641,1140639642,1140639643,1140639644,1140639645,1140639646,1140639647,1140639648,1140639649,1140612357,1543,1544,1545,1140612358,1546,1547,1548,1140621380,1632,1633,1634,1635,1636,1637,1880,1140616371,1140616372,1140616373,1140637500,1140633960,1140633961,1140633962,1140633963,1140633964,1140633965,1140633966,1140637501,1140633834,1140633835,1140633836,1140633837,1140633838,1140633839,1893,2050009,2050109,1894,394809,1140616369,1108,107841101,1140616367,1140642097,1140639625,1140639626,1140639627,1140639628,1140639629,1140642099,1140638591,1140638592,1140638593,1140638594,1140638595,1140638596,1140638597,1140638598,1140638599,1140638600,1140638601,1140638602,1140638603,107754501,1140642095,1140640293,1140640294,1140616697,1140632380,1140632381,1140632382,1140632383,1140632970,1140637515,1140637516,1140637517,1140632971,1140637513,1140637514,1140632972,1140637511,1140637512,111824237,111824486,573,2087009,2087109,111822655,111822656,111822657,111822658,111822659,111822660,111822661,111822663,111822664,111822665,111822666,111822673,111822674,111822675,111822676,111822677,1140612960,1140612961,1140612962,1140612963,1140612964,574,1140607343,1140607354,575,1140607355,1140607356,576,2059803,2337811,2337911,111822667,111822668,111822669,111822670,111822671,111822672,1140607357,107919401,111824506,1140634473,1140638804,1140642129,1140638805,1140642131,1140634472,1140634474,1140634475,1140634476,1770107,1140637507,1140632975,1140632976,1140632977,1140632979

]) // Convert to strings

  

// Lire le fichier CSV
fs.createReadStream(inputFile)
  .pipe(csv())
  .on("data", (row) => {
    const sku = Number(row["sku"]); // Convertir en nombre pour correspondre au Set
    const isDisabled = row["product_online"];
    const isNotVisible = row["visibility"];

    // Vérifier si le SKU est dans la liste
    if (mySKUs.has(sku)) {
      uniqueProducts.push({ sku, isDisabled, isNotVisible });
    }
  })
  .on("end", () => {
    console.log(`Found ${uniqueProducts.length} unique SKUs`);

    // Écrire le résultat filtré dans un nouveau CSV
    const ws = fs.createWriteStream(outputFile);
    fastCsv
      .write(uniqueProducts, { headers: true })
      .pipe(ws)
      .on("finish", () => {
        console.log(`Filtered unique SKUs saved to ${outputFile}`);
      });
  });